# ===============================================
# app.py ‚Äî Flask API ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏∏‡∏ö‡∏±‡∏ï‡∏¥‡πÄ‡∏´‡∏ï‡∏∏ + ‡∏Ç‡πà‡∏≤‡∏ß‡∏ó‡πâ‡∏≠‡∏á‡∏ñ‡∏¥‡πà‡∏ô
# ===============================================
from flask import Flask, jsonify
from flask_cors import CORS
import pandas as pd
import time, os, re
from fetch_news import fetch_local_news  # ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡πà‡∏ß‡∏ô‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏Ç‡πà‡∏≤‡∏ß

app = Flask(__name__)
CORS(app)

# ==========================
# üß† ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£ cache
# ==========================
cache_data = None
cache_timestamp = 0
CACHE_TTL = 24 * 60 * 60  # 24 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á

# ==========================
# üìç Mapping ‡∏£‡∏´‡∏±‡∏™‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î ‚Üí ‡∏ä‡∏∑‡πà‡∏≠‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î
# ==========================
province_code_map = {
    10: "‡∏Å‡∏£‡∏∏‡∏á‡πÄ‡∏ó‡∏û‡∏°‡∏´‡∏≤‡∏ô‡∏Ñ‡∏£", 11: "‡∏™‡∏°‡∏∏‡∏ó‡∏£‡∏õ‡∏£‡∏≤‡∏Å‡∏≤‡∏£", 12: "‡∏ô‡∏ô‡∏ó‡∏ö‡∏∏‡∏£‡∏µ", 13: "‡∏õ‡∏ó‡∏∏‡∏°‡∏ò‡∏≤‡∏ô‡∏µ", 14: "‡∏û‡∏£‡∏∞‡∏ô‡∏Ñ‡∏£‡∏®‡∏£‡∏µ‡∏≠‡∏¢‡∏∏‡∏ò‡∏¢‡∏≤",
    15: "‡∏≠‡πà‡∏≤‡∏á‡∏ó‡∏≠‡∏á", 16: "‡∏•‡∏û‡∏ö‡∏∏‡∏£‡∏µ", 17: "‡∏™‡∏¥‡∏á‡∏´‡πå‡∏ö‡∏∏‡∏£‡∏µ", 18: "‡∏ä‡∏±‡∏¢‡∏ô‡∏≤‡∏ó", 19: "‡∏™‡∏£‡∏∞‡∏ö‡∏∏‡∏£‡∏µ", 20: "‡∏ä‡∏•‡∏ö‡∏∏‡∏£‡∏µ",
    21: "‡∏£‡∏∞‡∏¢‡∏≠‡∏á", 22: "‡∏à‡∏±‡∏ô‡∏ó‡∏ö‡∏∏‡∏£‡∏µ", 23: "‡∏ï‡∏£‡∏≤‡∏î", 24: "‡∏â‡∏∞‡πÄ‡∏ä‡∏¥‡∏á‡πÄ‡∏ó‡∏£‡∏≤", 25: "‡∏õ‡∏£‡∏≤‡∏à‡∏µ‡∏ô‡∏ö‡∏∏‡∏£‡∏µ", 26: "‡∏ô‡∏Ñ‡∏£‡∏ô‡∏≤‡∏¢‡∏Å",
    27: "‡∏™‡∏£‡∏∞‡πÅ‡∏Å‡πâ‡∏ß", 30: "‡∏ô‡∏Ñ‡∏£‡∏£‡∏≤‡∏ä‡∏™‡∏µ‡∏°‡∏≤", 31: "‡∏ö‡∏∏‡∏£‡∏µ‡∏£‡∏±‡∏°‡∏¢‡πå", 32: "‡∏™‡∏∏‡∏£‡∏¥‡∏ô‡∏ó‡∏£‡πå", 33: "‡∏®‡∏£‡∏µ‡∏™‡∏∞‡πÄ‡∏Å‡∏©", 34: "‡∏≠‡∏∏‡∏ö‡∏•‡∏£‡∏≤‡∏ä‡∏ò‡∏≤‡∏ô‡∏µ",
    35: "‡∏¢‡πÇ‡∏™‡∏ò‡∏£", 36: "‡∏ä‡∏±‡∏¢‡∏†‡∏π‡∏°‡∏¥", 37: "‡∏≠‡∏≥‡∏ô‡∏≤‡∏à‡πÄ‡∏à‡∏£‡∏¥‡∏ç", 38: "‡∏ö‡∏∂‡∏á‡∏Å‡∏≤‡∏¨", 39: "‡∏´‡∏ô‡∏≠‡∏á‡∏ö‡∏±‡∏ß‡∏•‡∏≥‡∏†‡∏π", 40: "‡∏Ç‡∏≠‡∏ô‡πÅ‡∏Å‡πà‡∏ô",
    41: "‡∏≠‡∏∏‡∏î‡∏£‡∏ò‡∏≤‡∏ô‡∏µ", 42: "‡πÄ‡∏•‡∏¢", 43: "‡∏´‡∏ô‡∏≠‡∏á‡∏Ñ‡∏≤‡∏¢", 44: "‡∏°‡∏´‡∏≤‡∏™‡∏≤‡∏£‡∏Ñ‡∏≤‡∏°", 45: "‡∏£‡πâ‡∏≠‡∏¢‡πÄ‡∏≠‡πá‡∏î", 46: "‡∏Å‡∏≤‡∏¨‡∏™‡∏¥‡∏ô‡∏ò‡∏∏‡πå",
    47: "‡∏™‡∏Å‡∏•‡∏ô‡∏Ñ‡∏£", 48: "‡∏ô‡∏Ñ‡∏£‡∏û‡∏ô‡∏°", 49: "‡∏°‡∏∏‡∏Å‡∏î‡∏≤‡∏´‡∏≤‡∏£", 50: "‡πÄ‡∏ä‡∏µ‡∏¢‡∏á‡πÉ‡∏´‡∏°‡πà", 51: "‡∏•‡∏≥‡∏û‡∏π‡∏ô", 52: "‡∏•‡∏≥‡∏õ‡∏≤‡∏á",
    53: "‡∏≠‡∏∏‡∏ï‡∏£‡∏î‡∏¥‡∏ï‡∏ñ‡πå", 54: "‡πÅ‡∏û‡∏£‡πà", 55: "‡∏ô‡πà‡∏≤‡∏ô", 56: "‡∏û‡∏∞‡πÄ‡∏¢‡∏≤", 57: "‡πÄ‡∏ä‡∏µ‡∏¢‡∏á‡∏£‡∏≤‡∏¢", 58: "‡πÅ‡∏°‡πà‡∏Æ‡πà‡∏≠‡∏á‡∏™‡∏≠‡∏ô",
    60: "‡∏ô‡∏Ñ‡∏£‡∏™‡∏ß‡∏£‡∏£‡∏Ñ‡πå", 61: "‡∏≠‡∏∏‡∏ó‡∏±‡∏¢‡∏ò‡∏≤‡∏ô‡∏µ", 62: "‡∏Å‡∏≥‡πÅ‡∏û‡∏á‡πÄ‡∏û‡∏ä‡∏£", 63: "‡∏ï‡∏≤‡∏Å", 64: "‡∏™‡∏∏‡πÇ‡∏Ç‡∏ó‡∏±‡∏¢", 65: "‡∏û‡∏¥‡∏©‡∏ì‡∏∏‡πÇ‡∏•‡∏Å",
    66: "‡∏û‡∏¥‡∏à‡∏¥‡∏ï‡∏£", 67: "‡πÄ‡∏û‡∏ä‡∏£‡∏ö‡∏π‡∏£‡∏ì‡πå", 70: "‡∏£‡∏≤‡∏ä‡∏ö‡∏∏‡∏£‡∏µ", 71: "‡∏Å‡∏≤‡∏ç‡∏à‡∏ô‡∏ö‡∏∏‡∏£‡∏µ", 72: "‡∏™‡∏∏‡∏û‡∏£‡∏£‡∏ì‡∏ö‡∏∏‡∏£‡∏µ", 73: "‡∏ô‡∏Ñ‡∏£‡∏õ‡∏ê‡∏°",
    74: "‡∏™‡∏°‡∏∏‡∏ó‡∏£‡∏™‡∏≤‡∏Ñ‡∏£", 75: "‡∏™‡∏°‡∏∏‡∏ó‡∏£‡∏™‡∏á‡∏Ñ‡∏£‡∏≤‡∏°", 76: "‡πÄ‡∏û‡∏ä‡∏£‡∏ö‡∏∏‡∏£‡∏µ", 77: "‡∏õ‡∏£‡∏∞‡∏à‡∏ß‡∏ö‡∏Ñ‡∏µ‡∏£‡∏µ‡∏Ç‡∏±‡∏ô‡∏ò‡πå", 80: "‡∏ô‡∏Ñ‡∏£‡∏®‡∏£‡∏µ‡∏ò‡∏£‡∏£‡∏°‡∏£‡∏≤‡∏ä",
    81: "‡∏Å‡∏£‡∏∞‡∏ö‡∏µ‡πà", 82: "‡∏û‡∏±‡∏á‡∏á‡∏≤", 83: "‡∏†‡∏π‡πÄ‡∏Å‡πá‡∏ï", 84: "‡∏™‡∏∏‡∏£‡∏≤‡∏©‡∏é‡∏£‡πå‡∏ò‡∏≤‡∏ô‡∏µ", 85: "‡∏£‡∏∞‡∏ô‡∏≠‡∏á", 86: "‡∏ä‡∏∏‡∏°‡∏û‡∏£",
    90: "‡∏™‡∏á‡∏Ç‡∏•‡∏≤", 91: "‡∏™‡∏ï‡∏π‡∏•", 92: "‡∏ï‡∏£‡∏±‡∏á", 93: "‡∏û‡∏±‡∏ó‡∏•‡∏∏‡∏á", 94: "‡∏õ‡∏±‡∏ï‡∏ï‡∏≤‡∏ô‡∏µ", 95: "‡∏¢‡∏∞‡∏•‡∏≤", 96: "‡∏ô‡∏£‡∏≤‡∏ò‡∏¥‡∏ß‡∏≤‡∏™"
}

# ==========================
# üîß Utility
# ==========================
def clean_month_name(name):
    """‡πÅ‡∏õ‡∏•‡∏á‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏à‡∏≤‡∏Å‡∏´‡∏•‡∏≤‡∏¢‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö ‡πÄ‡∏ä‡πà‡∏ô '‡∏ï‡∏∏‡∏•‡∏≤‡∏Ñ‡∏°', '‡∏ï.‡∏Ñ.', '‡∏ï‡∏Ñ' ‚Üí '‡∏ï.‡∏Ñ'"""
    if not isinstance(name, str):
        return None
    name = re.sub(r"[.\-\s_/]", "", name)
    mapping = {
        "‡∏°‡∏Å‡∏£‡∏≤‡∏Ñ‡∏°": "‡∏°.‡∏Ñ", "‡∏°‡∏Ñ": "‡∏°.‡∏Ñ",
        "‡∏Å‡∏∏‡∏°‡∏†‡∏≤‡∏û‡∏±‡∏ô‡∏ò‡πå": "‡∏Å.‡∏û", "‡∏Å‡∏û": "‡∏Å.‡∏û",
        "‡∏°‡∏µ‡∏ô‡∏≤‡∏Ñ‡∏°": "‡∏°‡∏µ.‡∏Ñ", "‡∏°‡∏µ‡∏Ñ": "‡∏°‡∏µ.‡∏Ñ",
        "‡πÄ‡∏°‡∏©‡∏≤‡∏¢‡∏ô": "‡πÄ‡∏°.‡∏¢", "‡πÄ‡∏°‡∏¢": "‡πÄ‡∏°.‡∏¢",
        "‡∏û‡∏§‡∏©‡∏†‡∏≤‡∏Ñ‡∏°": "‡∏û.‡∏Ñ", "‡∏û‡∏Ñ": "‡∏û.‡∏Ñ",
        "‡∏°‡∏¥‡∏ñ‡∏∏‡∏ô‡∏≤‡∏¢‡∏ô": "‡∏°‡∏¥.‡∏¢", "‡∏°‡∏¥‡∏¢": "‡∏°‡∏¥.‡∏¢",
        "‡∏Å‡∏£‡∏Å‡∏é‡∏≤‡∏Ñ‡∏°": "‡∏Å.‡∏Ñ", "‡∏Å‡∏Ñ": "‡∏Å.‡∏Ñ",
        "‡∏™‡∏¥‡∏á‡∏´‡∏≤‡∏Ñ‡∏°": "‡∏™.‡∏Ñ", "‡∏™‡∏Ñ": "‡∏™.‡∏Ñ",
        "‡∏Å‡∏±‡∏ô‡∏¢‡∏≤‡∏¢‡∏ô": "‡∏Å.‡∏¢", "‡∏Å‡∏¢": "‡∏Å.‡∏¢",
        "‡∏ï‡∏∏‡∏•‡∏≤‡∏Ñ‡∏°": "‡∏ï.‡∏Ñ", "‡∏ï‡∏Ñ": "‡∏ï.‡∏Ñ",
        "‡∏û‡∏§‡∏®‡∏à‡∏¥‡∏Å‡∏≤‡∏¢‡∏ô": "‡∏û.‡∏¢", "‡∏û‡∏¢": "‡∏û.‡∏¢",
        "‡∏ò‡∏±‡∏ô‡∏ß‡∏≤‡∏Ñ‡∏°": "‡∏ò.‡∏Ñ", "‡∏ò‡∏Ñ": "‡∏ò.‡∏Ñ"
    }
    for key, val in mapping.items():
        if key in name:
            return val
    return None


# ==========================
# üìä ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å Excel
# ==========================
def fetch_accident_data():
    """‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏ü‡∏•‡πå Excel ‡πÅ‡∏•‡∏∞‡∏£‡∏ß‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏≤‡∏¢‡πÄ‡∏î‡∏∑‡∏≠‡∏ô + ‡∏£‡∏≤‡∏¢‡∏õ‡∏µ"""
    yearly_file = next((f for f in os.listdir() if "‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏ó‡∏µ‡πà 1" in f and f.endswith(".xlsx")), None)
    monthly_file = next((f for f in os.listdir() if "‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏ó‡∏µ‡πà 2" in f and f.endswith(".xlsx")), None)

    if not monthly_file or not yearly_file:
        raise FileNotFoundError("‚ùå ‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏ó‡∏±‡πâ‡∏á '‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏ó‡∏µ‡πà 1.xlsx' (‡∏£‡∏≤‡∏¢‡∏õ‡∏µ) ‡πÅ‡∏•‡∏∞ '‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏ó‡∏µ‡πà 2.xlsx' (‡∏£‡∏≤‡∏¢‡πÄ‡∏î‡∏∑‡∏≠‡∏ô)")

    print(f"\nüìÇ ‡πÉ‡∏ä‡πâ‡πÑ‡∏ü‡∏•‡πå‡∏£‡∏≤‡∏¢‡∏õ‡∏µ: {yearly_file}")
    print(f"üìÇ ‡πÉ‡∏ä‡πâ‡πÑ‡∏ü‡∏•‡πå‡∏£‡∏≤‡∏¢‡πÄ‡∏î‡∏∑‡∏≠‡∏ô: {monthly_file}")

    df_year = pd.read_excel(yearly_file)
    df_month = pd.read_excel(monthly_file)

    # ‡∏´‡∏≤ column ‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î
    col_prov_y = [c for c in df_year.columns if "‡∏£‡∏´‡∏±‡∏™" in str(c) or "‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î" in str(c)][0]
    col_prov_m = [c for c in df_month.columns if "‡∏£‡∏´‡∏±‡∏™" in str(c) or "‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î" in str(c)][0]

    # ‡πÅ‡∏õ‡∏•‡∏á‡∏£‡∏´‡∏±‡∏™‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç
    df_year[col_prov_y] = pd.to_numeric(df_year[col_prov_y], errors="coerce").fillna(0).astype(int)
    df_month[col_prov_m] = pd.to_numeric(df_month[col_prov_m], errors="coerce").fillna(0).astype(int)

    # Map ‡∏ä‡∏∑‡πà‡∏≠‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î
    df_year["province"] = df_year[col_prov_y].map(province_code_map)
    df_month["province"] = df_month[col_prov_m].map(province_code_map)

    # ‡∏£‡∏ß‡∏°‡∏£‡∏≤‡∏¢‡∏õ‡∏µ
    col_total_y = [c for c in df_year.columns if "‡∏£‡∏ß‡∏°" in str(c)][0]
    yearly_data = {}
    for _, row in df_year.iterrows():
        prov = row["province"]
        if prov:
            yearly_data[prov] = int(row[col_total_y])

    # ‡∏£‡∏ß‡∏°‡∏£‡∏≤‡∏¢‡πÄ‡∏î‡∏∑‡∏≠‡∏ô
    month_col_map = {}
    for col in df_month.columns:
        cleaned = clean_month_name(str(col))
        if cleaned:
            month_col_map[cleaned] = col

    print("\nüóìÔ∏è ‡∏ï‡∏£‡∏ß‡∏à‡∏û‡∏ö‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î:", list(month_col_map.keys()))

    monthly_data = {}
    for _, row in df_month.iterrows():
        prov = row["province"]
        if prov:
            monthly_data[prov] = {}
            for m, col_name in month_col_map.items():
                val = row[col_name]
                monthly_data[prov][m] = int(val) if not pd.isna(val) else 0

    # ‡∏£‡∏ß‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
    combined = {}
    for prov in province_code_map.values():
        total = yearly_data.get(prov, 0)
        months = monthly_data.get(prov, {})
        avg = round(sum(months.values()) / len(months), 2) if months else 0

        combined[prov] = {
            "total": total,
            "monthly": months,
            "average": avg
        }

    print(f"\n‚úÖ ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à {len(combined)} ‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î")
    return combined


# ==========================
# üî• API
# ==========================
@app.route("/accident_data")
def accident_data():
    """‡∏Ñ‡∏∑‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏∏‡∏ö‡∏±‡∏ï‡∏¥‡πÄ‡∏´‡∏ï‡∏∏‡πÅ‡∏ö‡∏ö JSON"""
    global cache_data, cache_timestamp
    try:
        now = time.time()
        if cache_data and (now - cache_timestamp) < CACHE_TTL:
            print("üü¢ ‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å cache")
            return jsonify(cache_data)

        print("\nüîÑ ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å Excel ‡πÉ‡∏´‡∏°‡πà...")
        data = fetch_accident_data()
        cache_data = data
        cache_timestamp = now
        return jsonify(data)

    except Exception as e:
        print("‚ùå Error:", e)
        return jsonify({"error": str(e)}), 500


# ==========================
# üì∞ ‡∏î‡∏∂‡∏á‡∏Ç‡πà‡∏≤‡∏ß‡∏ó‡πâ‡∏≠‡∏á‡∏ñ‡∏¥‡πà‡∏ô
# ==========================
@app.route("/news/<province>")
def news(province):
    """‡∏î‡∏∂‡∏á‡∏Ç‡πà‡∏≤‡∏ß‡∏ó‡πâ‡∏≠‡∏á‡∏ñ‡∏¥‡πà‡∏ô‡∏Ç‡∏≠‡∏á‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î‡∏ô‡∏±‡πâ‡∏ô ‡πÜ"""
    try:
        news_data = fetch_local_news(province)
        return jsonify(news_data)
    except Exception as e:
        print("‚ùå Error (news):", e)
        return jsonify({"error": str(e)}), 500


# ==========================
# üöÄ Run Flask
# ==========================
if __name__ == "__main__":
    print("üöÄ Flask server started (Yearly + Monthly + News)")
    try:
        preview = fetch_accident_data()
        print(f"\n‚úÖ ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î 3 ‡πÅ‡∏£‡∏Å:")
        for k, v in list(preview.items())[:3]:
            jan_val = v["monthly"].get("‡∏°.‡∏Ñ", "-")
            print(f"  {k}: ‡∏£‡∏ß‡∏° {v['total']} ‡∏Ñ‡∏ô, ‡∏°‡∏Å‡∏£‡∏≤‡∏Ñ‡∏° {jan_val} ‡∏Ñ‡∏ô, ‡∏Ñ‡πà‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢ {v['average']} ‡∏Ñ‡∏ô/‡πÄ‡∏î‡∏∑‡∏≠‡∏ô")
    except Exception as e:
        print(f"‚ùå ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {e}")
    app.run(port=5000, debug=True)
